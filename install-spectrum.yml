---

- name: check spectrum versions
  hosts: localhost
  become: no
  vars:
    preversion: "{{ lookup('file', dist_dir + '/requires.dat', errors='ignore') }}"
    version: "{{ lookup('file', dist_dir + '/version.dat', errors='ignore') }}"
    updateversion: "{{ lookup('file', update_dir + '/version.dat', errors='ignore') }}"
    requires: "{{ lookup('file', update_dir + '/requires.dat', errors='ignore') }}"
  tasks:
    - name: check if base version requires an other version
      debug:
        msg: "you want to install {{ version }} which requires {{ preversion }}"
      failed_when: preversion != ""

    - name: check if update version requires the base version
      debug:
        msg: "base version : {{ version }} , {{ updateversion }} requires  {{ requires }}"
      failed_when:  requires not in version

- name: install pre-requirements
  hosts: all
  become: yes
  become_method: sudo
  tasks:
    - name: Ensure prerequirements are installed
      yum:
        name: "{{ packages }}"
        state: present
      vars:
        packages:
        - motif.x86_64
        - motif-devel.x86_64
        - ksh.x86_64
        #- libnscl
        - libnsl.x86_64
        - abrt.x86_64
        - elfutils-libelf.x86_64
        - expat.x86_64
        - fontconfig.x86_64
        - freetype.x86_64
        - glibc.x86_64
        - libaio.x86_64
        - libcanberra-gtk2.x86_64
        - libgcc.x86_64
        - libICE.x86_64
        - libjpeg-turbo.x86_64
        - libnsl.x86_64
        - libpng.x86_64
        - libSM.x86_64
        - libstdc++.x86_64
        - libuuid.x86_64
        - libX11.x86_64
        - libXau.x86_64
        - libxcb.x86_64
        - libxcrypt.x86_64
        - libxcrypt.i686
        - libXdmcp.x86_64
        - libXext.x86_64
        - libXfont2.x86_64
        - libXft.x86_64
        - libXi.x86_64
        - libxkbfile.x86_64
        - libXmu.x86_64
        - libXp.x86_64
        - libXrender.x86_64
        - libXt.x86_64
        - libXtst.x86_64
        - ncurses.x86_64
        #- ncurses-common-libs
        - ncurses-compat-libs.x86_64
        - ncurses-libs.x86_64
        - nss-softokn-freebl.x86_64
        - numactl-libs.x86_64
        - perl-LWP-Protocol-https
        - sssd-client.x86_64
        - xorg-x11-fonts-misc
        - xorg-x11-server-common.x86_64
        - xorg-x11-xkb-utils.x86_64
        - xterm.x86_64
        - zlib.x86_64

    - name: set SElinux to permissive mode
      ansible.builtin.lineinfile:
        path: /etc/selinux/config
        regexp: '^SELINUX='
        line: SELINUX=permissive

    - name: stop firewalld
      service:
        name: firewalld
        state: stopped
        enabled: no

    - name: remove empty lines from sudoers
      ansible.builtin.replace:
        path: /etc/sudoers
        regexp: '^$'
        replace: "##### replaced empty lines regarding Spectrum Bug"

    - name: create spectrum owner
      ansible.builtin.user:
        name: "{{ spectrum_owner }}"
        comment: Spectrum owner
        shell: /bin/bash
        password: "{{ spectrum_password | password_hash('sha512') }}"
        update_password: on_create

    - name: give spectrum owner access to sradmin.exe
      ansible.builtin.lineinfile:
        path: /etc/sudoers
        line: "{{ spectrum_owner }} ALL={{ sradmin_dir }}/sradmin.exe"

    - name: Show all the hosts in the current play
      become: no
      lineinfile:
        create: yes
        path: "tmp/hosts.tmp"
        line: "{{ ansible_host }} {{ ansible_hostname }}"
      delegate_to: localhost

    - name: rollout hosts
      lineinfile:
        path: "/etc/hosts"
        line: "{{ item }}"
      loop: "{{ lookup('file', 'tmp/hosts.tmp').splitlines() }}"

#    - name: rollout hosts to localhost
#      lineinfile:
#        path: "/etc/hosts"
#        line: "{{ item }}"
#      loop: "{{ lookup('file', 'tmp/hosts.tmp').splitlines() }}"
#      delegate_to: localhost

- name: install SRAdmin
  hosts: all
  become: yes
  become_method: sudo
  gather_facts: no
  tasks:
    - name: create sradmin directory
      ansible.builtin.file:
        path: "{{ sradmin_dir }}"
        state: directory
        mode: '0755'

    - name: copy sradmin.exe
      copy:
        src: "{{ dist_dir }}/sdic/linux/sradmin.exe"
        dest: "{{ sradmin_dir }}"
        mode: '0744'

    - name: prepare rc2.d
      copy:
        src: "{{ dist_dir }}/sdic/linux/sradmin.rc2"
        dest: /etc/init.d/sradmin

    - name: chmod
      ansible.builtin.file:
        path: /etc/init.d/sradmin
        mode: '0500'

    - name: set sradmin home
      ansible.builtin.lineinfile:
        path: /etc/init.d/sradmin
        line: SRADHOME={{ sradmin_dir }}
        regexp: '^SRADHOME='

    - name: set sudoers symlink
      ansible.builtin.file:
        src: /etc/sudoers
        dest: "{{ sradmin_dir }}/sudoers"
        owner: root
        group: root
        state: link

    - name: enable and start sradmin
      service:
        name: sradmin
        enabled: yes

    - name: enable and start sradmin
      service:
        name: sradmin
        state: started

- name: prepare hostargs
  hosts: all
  become: yes
  become_method: sudo
  gather_facts: yes
  tasks:
    - name: create install hostargs file
      ansible.builtin.lineinfile:
        path: "/tmp/{{ ansible_hostname }}.hostargs"
        #flat: yes
        line: remote_host={{ ansible_hostname }}
        regexp: '^remote_host='
        create: yes

    - name: add landscape to hostargs
      ansible.builtin.lineinfile:
        path: "/tmp/{{ ansible_hostname }}.hostargs"
        line: l_handle={{ l_handle }}
        regexp: '^l_handle='

    - name: add install directory to hostargs
      ansible.builtin.lineinfile:
        path: "/tmp/{{ ansible_hostname }}.hostargs"
        line: install_dir={{ install_dir }}
        regexp: '^install_dir='

    - name: add install owner to hostargs
      ansible.builtin.lineinfile:
        path: "/tmp/{{ ansible_hostname }}.hostargs"
        line: install_owner={{ spectrum_owner }}
        regexp: '^install_owner='

    - name: add install media path
      ansible.builtin.lineinfile:
        path: "/tmp/{{ ansible_hostname }}.hostargs"
        line: vcd_path={{ dist_dir }}
        regexp: '^vcd_path='

    - name: add main location server
      ansible.builtin.lineinfile:
        path: "/tmp/{{ ansible_hostname }}.hostargs"
        line: main_loc_serv={{ main_loc_serv }}
        regexp: '^main_loc_serv='

    - name: add install ss
      ansible.builtin.lineinfile:
        path: "/tmp/{{ ansible_hostname }}.hostargs"
        line: ss_install={{ install_ss }}
        regexp: '^ss_install='

    - name: add install oneclick
      ansible.builtin.lineinfile:
        path: "/tmp/{{ ansible_hostname }}.hostargs"
        line: oc_install={{ install_oneclick }}
        regexp: '^oc_install='

    - name: ignore disk space
      ansible.builtin.lineinfile:
        path: "/tmp/{{ ansible_hostname }}.hostargs"
        line: ignore_disk_space=yes
        regexp: '^ignore_disk_space='

    - name: add locale
      ansible.builtin.lineinfile:
        path: "/tmp/{{ ansible_hostname }}.hostargs"
        line: locale=en_US
        regexp: '^locale='

    - name: remove exclude parts
      ansible.builtin.lineinfile:
        path: "/tmp/{{ ansible_hostname }}.hostargs"
        regexp: '^exclude_parts='
        state: absent

    - name: add exclude parts
      ansible.builtin.lineinfile:
        path: "/tmp/{{ ansible_hostname }}.hostargs"
        line: exclude_parts=SA-RPT-MGR
        regexp: '^exclude_parts='
      when: install_srm == "no"

    - name: copy hostargs to localhost
      ansible.builtin.fetch:
        src: /tmp/{{ ansible_hostname }}.hostargs
        dest: ./
        flat: yes

    - name: create install password file
      ansible.builtin.lineinfile:
        path: "/tmp/{{ ansible_hostname }}.pw"
        line: "{{ ansible_hostname }} {{ spectrum_owner }} spectrum"
        create: yes

    - name: copy password file to localhost
      ansible.builtin.fetch:
        src: /tmp/{{ ansible_hostname }}.pw
        dest: ./
        flat: yes

- name: fresh installation of Spectrum
  hosts: all
  become: yes
  become_method: sudo
  gather_facts: yes
  tasks:
    - name: get service facts
      service_facts:
    - name: start spectrum silent installation
      ansible.builtin.command: "{{ dist_dir }}/sdic/sdiclinux.exe -h ./{{ ansible_hostname }}.hostargs -p ./{{ ansible_hostname }}.pw -accept "
      delegate_to: 127.0.0.1
      become: no
      register: spec_out
      when: ansible_facts.services["processd.service"] is not defined
      failed_when: "'Installation failure' in spec_out.stdout"
      changed_when: "'Installation successful' in spec_out.stdout"

#    - name: print spectrum log
#      debug:
#        msg: "{{spec_out.stdout}}"
#      when: spec_out.stdout is defined
    #TODO: move hostrc after ssdb load on secondary
    - name: create .hostrc template
      become: no
      lineinfile:
        path: tmp/.hostrc
        line: "{{ ansible_hostname }}"
        create: yes
      delegate_to: localhost

    - name: copy .hostrc to spectrum server
      #become: yes
      #become_user: "{{ spectrum_owner }}"
      ansible.builtin.copy:
        src: tmp/.hostrc
        dest: "{{ install_dir }}/"

#    - name: modify .hostrc
#      lineinfile:
#        path: "{{ install_dir }}/.hostrc"
#        line: "+"

    - block:
        - name: check for running SpectroSERVER
          shell: ps -ef | grep SpectroSERVER | grep -v grep
          ignore_errors: yes
          args:
            warn: no
          changed_when: false
          failed_when: false
          register: ssstatus

        - name: stop Spectroserver
          become: yes
          become_user: "{{ spectrum_owner }}"
          command: "{{ install_dir }}/bin/stopSS.pl"
          when: ssstatus.rc == 0
          changed_when: ssstatus.rc == 0

        - name: primary ssdbsave
          become: yes
          become_user: "{{ spectrum_owner }}"
          command: "{{ install_dir }}/SS-Tools/SSdbsave -cmq /tmp/ansible-{{ ansible_hostname }}"
          args:
            chdir: "{{ install_dir }}/SS"

        - name: get ssdb
          become: yes
          become_user: "{{ spectrum_owner }}"
          fetch: src=/tmp/ansible-{{ ansible_hostname }}.SSdb dest=tmp/ flat=yes
      when:
        - is_secondary == "no"
        - install_ss == "yes"

    - block:
       - name: upload ssdb
         become: yes
         become_user: "{{ spectrum_owner }}"
         copy: src=tmp/ansible-{{ is_secondary_for }}.SSdb dest={{ install_dir }}/SS/

       - name: load ssdb on secondary
         become: yes
         become_user: "{{ spectrum_owner }}"
         command: "{{ install_dir }}/SS-Tools/SSdbload -ilq -add 20 ansible-{{ is_secondary_for }}.SSdb"
         args:
           chdir: "{{ install_dir }}/SS"
      when: is_secondary == "yes"

- name: install update if requested
  hosts: all
  become: yes
  become_method: sudo
  gather_facts: no
  vars:
    updateversion: "{{ lookup('file', update_dir + '/version.dat', errors='ignore') }}"

  tasks:
    - name: check if update already installed
      command: grep {{ updateversion }} {{ install_dir }}/Install-Tools/.history
      ignore_errors: yes
      args:
        warn: no
      changed_when: false
      failed_when: false
      register: updatecheck

#    - debug:
#        msg: "{{ updatecheck.rc }}"

    - block:
        - name: add install media path
          ansible.builtin.lineinfile:
            path: "/tmp/{{ ansible_hostname }}.hostargs"
            line: vcd_path={{ update_dir }}
            regexp: '^vcd_path='

        - name: copy hostargs to localhost
          ansible.builtin.fetch:
            src: /tmp/{{ ansible_hostname }}.hostargs
            dest: ./
            flat: yes

        - name: check for running SpectroSERVER
          shell: ps -ef | grep SpectroSERVER | grep -v grep
          ignore_errors: yes
          args:
            warn: no
          changed_when: false
          failed_when: false
          register: ssstatus

    #    - debug:
    #        msg: "{{ ssstatus }}"

        - name: stop Spectroserver
          become: yes
          become_user: "{{ spectrum_owner }}"
          command: "{{ install_dir }}/bin/stopSS.pl"
          when: ssstatus.rc == 0
          changed_when: ssstatus.rc == 0

        - name: start spectrum update silent installation
          ansible.builtin.command: "{{ update_dir }}/sdic/sdiclinux.exe -h ./{{ ansible_hostname }}.hostargs -p ./{{ ansible_hostname }}.pw -accept "
          delegate_to: 127.0.0.1
          become: no
          register: update_out
          failed_when: "'Installation failure' in update_out.stdout or 'Failed to copy' in update_out.stdout"
          changed_when: "'Installation successful' in update_out.stdout"

    #    - name: print spectrum log
    #      debug:
    #        msg: "{{update_out.stdout}}"
    #      when: update_out.stdout is defined

      when: updatecheck.rc != 0

- name: finaly start Spectrum
  hosts: all
  gather_facts: no
  tasks:
    - name: start spectroserver
      become: yes
      become_user: "{{ spectrum_owner }}"
      command: "{{ install_dir }}/bin/startSS.pl"
      when: install_ss == "yes"
