---

- name: install pre-requirements
  hosts: all
  become: yes
  become_method: sudo
  tasks:
    #    - name: Message
    #  debug:
    #    msg: "install prerequirements"

    # todo: SE linux /etc/selinux/config SELINUX=permissive


    - name: Ensure prerequirements are installed
      dnf:
        name: "{{ item }}"
        state: present
        update_cache: yes
          #allow_downgrade: yes
      loop:
        - motif
        - motif-devel
        - ksh
        #- libnscl
        - abrt
        - elfutils-libelf
        - expat
        - fontconfig
        - freetype
        - glibc
        - libaio
        - libcanberra-gtk2
        - libgcc
        - libICE
        - libjpeg
        - libnsl
        - libpng
        - libSM
        - libstdc++
        - libuuid
        - libX11
        - libXau
        - libxcb
        - libxcrypt
        - libXdmcp
        - libXext
        - libXfont2
        - libXft
        - libXi
        - libxkbfile
        - libXmu
        - libXp
        - libXrender
        - libXt
        - libXtst
        - ncurses
        #- ncurses-common-libs
        - ncurses-compat-libs
        - ncurses-libs
        - nss-softokn-freebl
        - numactl-libs
        #- perl-LWP-Protokoll-https
        - sssd-client
        - xorg-x11-fonts-misc
        - xorg-x11-server-common
        - xorg-x11-xkb-utils
        - xterm
        - zlib

    - name: set SElinux to permissive mode
      ansible.builtin.lineinfile:
        path: /etc/selinux/config
        regexp: '^SELINUX='
        line: SELINUX=permissive

    - name: stop firewalld
      service:
        name: firewalld
        state: stopped
        enabled: no

    - name: set hostname in hosts file
      ansible.builtin.lineinfile:
        path: /etc/hosts
        regexp: "^{{ ansible_host }}"
        line: "{{ ansible_host }} {{ ansible_hostname }}"

    - name:
      ansible.builtin.replace:
        path: /etc/sudoers
        regexp: '^$'
        replace: "##### replaced empty lines regarding Spectrum Bug"

    - name: create spectrum owner
      ansible.builtin.user:
        name: "{{ spectrum_owner }}"
        comment: Spectrum owner
        shell: /bin/bash
        password: "{{ 'spectrum' | password_hash('sha512') }}"
        update_password: on_create

    - name: give spectrum owner access to sradmin.exe
      ansible.builtin.lineinfile:
        path: /etc/sudoers
        line: "{{ spectrum_owner }} ALL=/opt/CA/SRAdmin/sradmin.exe"
        # todo: sradmin als variable

- name: install SRAdmin
  hosts: all
  become: yes
  become_method: sudo
  gather_facts: no
  tasks:
    - name: create sradmin directory
      ansible.builtin.file:
        path: "{{ install_dir }}/../SRAdmin"
        state: directory
        mode: '0755'

    - name: copy sradmin.exe
      copy:
        src: "{{ dist_dir }}/sdic/linux/sradmin.exe"
        dest: "{{ install_dir }}/../SRAdmin"
        mode: '0744'

    - name: prepare rc2.d
      copy:
        src: "{{ dist_dir }}/sdic/linux/sradmin.rc2"
        dest: /etc/init.d/sradmin

    - name: chmod
      ansible.builtin.file:
        path: /etc/init.d/sradmin
        mode: '0500'

    - name: set sradmin home
      ansible.builtin.lineinfile:
        path: /etc/init.d/sradmin
        line: SRADHOME=/opt/CA/SRAdmin
        regexp: '^SRADHOME='
        # todo: variable in host file

    - name: set sudoers symlink
      ansible.builtin.file:
        src: /etc/sudoers
        dest: /opt/CA/SRAdmin/sudoers
        owner: root
        group: root
        state: link

    - name: enable and start sradmin
      service:
        name: sradmin
        enabled: yes

    - name: enable and start sradmin
      service:
        name: sradmin
        state: started

- name: prepare hostargs
  hosts: all
  become: yes
  become_method: sudo
  gather_facts: no
  tasks:
    - name: create install hostargs file
      ansible.builtin.lineinfile:
        path: "/tmp/{{ ansible_hostname }}.hostargs"
        line: remote_host={{ ansible_hostname }}
        regexp: '^remote_host='
        create: yes

    - name: add landscape to hostargs
      ansible.builtin.lineinfile:
        path: "/tmp/{{ ansible_hostname }}.hostargs"
        line: l_handle={{ l_handle }}
        regexp: '^l_handle='

    - name: add install directory to hostargs
      ansible.builtin.lineinfile:
        path: "/tmp/{{ ansible_hostname }}.hostargs"
        line: install_dir={{ install_dir }}
        regexp: '^install_dir='

    - name: add install owner to hostargs
      ansible.builtin.lineinfile:
        path: "/tmp/{{ ansible_hostname }}.hostargs"
        line: install_owner={{ spectrum_owner }}
        regexp: '^install_owner='

    - name: add install media path
      ansible.builtin.lineinfile:
        path: "/tmp/{{ ansible_hostname }}.hostargs"
        line: vcd_path={{ dist_dir }}
        regexp: '^vcd_path='

    - name: add main location server
      ansible.builtin.lineinfile:
        path: "/tmp/{{ ansible_hostname }}.hostargs"
        line: main_loc_serv={{ main_loc_serv }}
        regexp: '^main_loc_serv='

    - name: add install ss
      ansible.builtin.lineinfile:
        path: "/tmp/{{ ansible_hostname }}.hostargs"
        line: ss_install=yes
        regexp: '^ss_install='

    - name: add install oneclick
      ansible.builtin.lineinfile:
        path: "/tmp/{{ ansible_hostname }}.hostargs"
        line: oc_install=yes
        regexp: '^oc_install='

    - name: add exclude parts
      ansible.builtin.lineinfile:
        path: "/tmp/{{ ansible_hostname }}.hostargs"
        line: exclude_parts=SA-RPT-MGR
        regexp: '^exclude_parts='

    - name: add same
      ansible.builtin.lineinfile:
        path: "/tmp/{{ ansible_hostname }}.hostargs"
        line: same=yes
        regexp: '^same='

    - name: add overwrite
      ansible.builtin.lineinfile:
        path: "/tmp/{{ ansible_hostname }}.hostargs"
        line: overwrite=yes
        regexp: '^overwrite='

    - name: add locale
      ansible.builtin.lineinfile:
        path: "/tmp/{{ ansible_hostname }}.hostargs"
        line: locale=en_US
        regexp: '^locale='

    - name: copy hostargs to localhost
      ansible.builtin.fetch:
        src: /tmp/{{ ansible_hostname }}.hostargs
        dest: ./
        flat: yes

    - name: create install password file
      ansible.builtin.lineinfile:
        path: "/tmp/{{ ansible_hostname }}.pw"
        line: "{{ ansible_hostname }} {{ spectrum_owner }} spectrum"
        create: yes

    - name: copy password file to localhost
      ansible.builtin.fetch:
        src: /tmp/{{ ansible_hostname }}.pw
        dest: ./
        flat: yes

    - name: start spectrum silent installation
      ansible.builtin.command: "{{ dist_dir }}/sdic/sdiclinux.exe -h ./{{ ansible_hostname }}.hostargs -p ./{{ ansible_hostname }}.pw -accept"
      delegate_to: 127.0.0.1
      register: spec_out

    - name: print spectrum log
      debug:
        msg: "{{spec_out.stdout}}"