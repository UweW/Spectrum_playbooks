---

- name: install pre-requirements
  hosts: all
  become: yes
  become_method: sudo
  tasks:
    #    - name: Message
    #  debug:
    #    msg: "install prerequirements"

    # todo: SE linux /etc/selinux/config SELINUX=permissive


    - name: Ensure prerequirements are installed
      yum:
        name: "{{ packages }}"
        state: present
      vars:
        packages:
        - motif.x86_64
        - motif-devel.x86_64
        - ksh.x86_64
        #- libnscl
        - libnsl.x86_64
        - abrt.x86_64
        - elfutils-libelf.x86_64
        - expat.x86_64
        - fontconfig.x86_64
        - freetype.x86_64
        - glibc.x86_64
        - libaio.x86_64
        - libcanberra-gtk2.x86_64
        - libgcc.x86_64
        - libICE.x86_64
        - libjpeg-turbo.x86_64
        - libnsl.x86_64
        - libpng.x86_64
        - libSM.x86_64
        - libstdc++.x86_64
        - libuuid.x86_64
        - libX11.x86_64
        - libXau.x86_64
        - libxcb.x86_64
        - libxcrypt.x86_64
        - libxcrypt.i686
        - libXdmcp.x86_64
        - libXext.x86_64
        - libXfont2.x86_64
        - libXft.x86_64
        - libXi.x86_64
        - libxkbfile.x86_64
        - libXmu.x86_64
        - libXp.x86_64
        - libXrender.x86_64
        - libXt.x86_64
        - libXtst.x86_64
        - ncurses.x86_64
        #- ncurses-common-libs
        - ncurses-compat-libs.x86_64
        - ncurses-libs.x86_64
        - nss-softokn-freebl.x86_64
        - numactl-libs.x86_64
        - perl-LWP-Protocol-https
        - sssd-client.x86_64
        - xorg-x11-fonts-misc
        - xorg-x11-server-common.x86_64
        - xorg-x11-xkb-utils.x86_64
        - xterm.x86_64
        - zlib.x86_64

    - name: set SElinux to permissive mode
      ansible.builtin.lineinfile:
        path: /etc/selinux/config
        regexp: '^SELINUX='
        line: SELINUX=permissive

    - name: stop firewalld
      service:
        name: firewalld
        state: stopped
        enabled: no

    - name: set hostname in hosts file
      ansible.builtin.lineinfile:
        path: /etc/hosts
        regexp: "^{{ ansible_host }}"
        line: "{{ ansible_host }} {{ ansible_hostname }}"

    - name:
      ansible.builtin.replace:
        path: /etc/sudoers
        regexp: '^$'
        replace: "##### replaced empty lines regarding Spectrum Bug"

    - name: create spectrum owner
      ansible.builtin.user:
        name: "{{ spectrum_owner }}"
        comment: Spectrum owner
        shell: /bin/bash
        password: "{{ 'spectrum' | password_hash('sha512') }}"
        update_password: on_create

    - name: give spectrum owner access to sradmin.exe
      ansible.builtin.lineinfile:
        path: /etc/sudoers
        line: "{{ spectrum_owner }} ALL=/opt/CA/SRAdmin/sradmin.exe"
        # todo: sradmin als variable

- name: install SRAdmin
  hosts: all
  become: yes
  become_method: sudo
  gather_facts: no
  tasks:
    - name: create sradmin directory
      ansible.builtin.file:
        path: "{{ install_dir }}/../SRAdmin"
        state: directory
        mode: '0755'

    - name: copy sradmin.exe
      copy:
        src: "{{ dist_dir }}/sdic/linux/sradmin.exe"
        dest: "{{ install_dir }}/../SRAdmin"
        mode: '0744'

    - name: prepare rc2.d
      copy:
        src: "{{ dist_dir }}/sdic/linux/sradmin.rc2"
        dest: /etc/init.d/sradmin

    - name: chmod
      ansible.builtin.file:
        path: /etc/init.d/sradmin
        mode: '0500'

    - name: set sradmin home
      ansible.builtin.lineinfile:
        path: /etc/init.d/sradmin
        line: SRADHOME=/opt/CA/SRAdmin
        regexp: '^SRADHOME='
        # todo: variable in host file

    - name: set sudoers symlink
      ansible.builtin.file:
        src: /etc/sudoers
        dest: /opt/CA/SRAdmin/sudoers
        owner: root
        group: root
        state: link

    - name: enable and start sradmin
      service:
        name: sradmin
        enabled: yes

    - name: enable and start sradmin
      service:
        name: sradmin
        state: started

- name: prepare hostargs
  hosts: all
  become: yes
  become_method: sudo
  gather_facts: no
  tasks:
    - name: create install hostargs file
      ansible.builtin.lineinfile:
        path: "/tmp/{{ ansible_hostname }}.hostargs"
        line: remote_host={{ ansible_hostname }}
        regexp: '^remote_host='
        create: yes

    - name: add landscape to hostargs
      ansible.builtin.lineinfile:
        path: "/tmp/{{ ansible_hostname }}.hostargs"
        line: l_handle={{ l_handle }}
        regexp: '^l_handle='

    - name: add install directory to hostargs
      ansible.builtin.lineinfile:
        path: "/tmp/{{ ansible_hostname }}.hostargs"
        line: install_dir={{ install_dir }}
        regexp: '^install_dir='

    - name: add install owner to hostargs
      ansible.builtin.lineinfile:
        path: "/tmp/{{ ansible_hostname }}.hostargs"
        line: install_owner={{ spectrum_owner }}
        regexp: '^install_owner='

    - name: add install media path
      ansible.builtin.lineinfile:
        path: "/tmp/{{ ansible_hostname }}.hostargs"
        line: vcd_path={{ dist_dir }}
        regexp: '^vcd_path='

    - name: add main location server
      ansible.builtin.lineinfile:
        path: "/tmp/{{ ansible_hostname }}.hostargs"
        line: main_loc_serv={{ main_loc_serv }}
        regexp: '^main_loc_serv='

    - name: add install ss
      ansible.builtin.lineinfile:
        path: "/tmp/{{ ansible_hostname }}.hostargs"
        line: ss_install=yes
        regexp: '^ss_install='

    - name: add install oneclick
      ansible.builtin.lineinfile:
        path: "/tmp/{{ ansible_hostname }}.hostargs"
        line: oc_install=yes
        regexp: '^oc_install='

    - name: add exclude parts
      ansible.builtin.lineinfile:
        path: "/tmp/{{ ansible_hostname }}.hostargs"
        line: exclude_parts=SA-RPT-MGR
        regexp: '^exclude_parts='

    - name: add same
      ansible.builtin.lineinfile:
        path: "/tmp/{{ ansible_hostname }}.hostargs"
        line: same=yes
        regexp: '^same='

    - name: add overwrite
      ansible.builtin.lineinfile:
        path: "/tmp/{{ ansible_hostname }}.hostargs"
        line: overwrite=yes
        regexp: '^overwrite='

    - name: ignore disk space
      ansible.builtin.lineinfile:
        path: "/tmp/{{ ansible_hostname }}.hostargs"
        line: ignore_disk_space=yes
        regexp: '^ignore_disk_space='

    - name: add xtn install
      ansible.builtin.lineinfile:
        path: "/tmp/{{ ansible_hostname }}.hostargs"
        line: xtn_install=yes
        regexp: '^xtn_install='

    - name: add locale
      ansible.builtin.lineinfile:
        path: "/tmp/{{ ansible_hostname }}.hostargs"
        line: locale=en_US
        regexp: '^locale='

    - name: copy hostargs to localhost
      ansible.builtin.fetch:
        src: /tmp/{{ ansible_hostname }}.hostargs
        dest: ./
        flat: yes

    - name: create install password file
      ansible.builtin.lineinfile:
        path: "/tmp/{{ ansible_hostname }}.pw"
        line: "{{ ansible_hostname }} {{ spectrum_owner }} spectrum"
        create: yes

    - name: copy password file to localhost
      ansible.builtin.fetch:
        src: /tmp/{{ ansible_hostname }}.pw
        dest: ./
        flat: yes

    - name: get service facts
      service_facts:

    - name: start spectrum silent installation
      ansible.builtin.command: "{{ dist_dir }}/sdic/sdiclinux.exe -h ./{{ ansible_hostname }}.hostargs -p ./{{ ansible_hostname }}.pw -accept "
      delegate_to: 127.0.0.1
      become: no
      register: spec_out
      when: ansible_facts.services["processd.service"] is not defined

    - name: print spectrum log
      debug:
        msg: "{{spec_out.stdout}}"
      when: spec_out.stdout is defined
      #when: ansible_facts.services["processd.service"] is not defined

#    - name: services
#      debug:
#        msg: "{{ ansible_facts.services }}"